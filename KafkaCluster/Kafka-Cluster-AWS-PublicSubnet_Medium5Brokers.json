{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template: This template creates 1 Kafka Zookeeper and 5 Kafka Broker instances",
  "Parameters": {
    "EBSVolumeSize": {
      "Type": "Number",
      "Default": "10"
    },
    "EBSType": {
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "standard",
        "gp2",
        "io1"
      ]
    },
    "EBSDeviceName": {
      "Type": "String",
      "Default": "/dev/xvda",
      "AllowedValues": [
        "/dev/xvda",
        "/dev/sda1"
      ]
    },
    "VPCId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of existing Virtual Private Cloud (VPC)"
    },
    "SubnetID": {
      "Description": "Subnet ID in your Virtual Private Cloud (VPC) for Zookeepers and Kafka Brokers",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "SubnetCIDR": {
      "Description": "CIDR Block for Private Subnet where Zookeepers and Kafka Brokers will be deployed. ex:10.0.1.0/24",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.0.1.0/24",
      "AllowedPattern": "[a-zA-Z0-9]+\\..+"
    },
    "RemoteAccessCIDR": {
      "Description": "IP CIDR from which you are likely to SSH into. You can add rules later by modifying the created security groups e.g. 54.32.98.160/32.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "KafkaDownloadURL": {
      "Description": "URL to download kafka tarball",
      "Type": "String",
      "Default": "http://ftp.nluug.nl/internet/apache/kafka/1.1.0/kafka_2.11-1.1.0.tgz"
    },
    "KafkaVersion": {
      "Description": "Version used",
      "Type": "String",
      "Default": "kafka_2.11-1.1.0"
    },
    "ZkeeperServerInstanceType": {
      "Description": "Zookeeper EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "r3.large",
        "t2.nano",
        "t2.small",
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KafkaServerInstanceType": {
      "Description": "KafkaBroker EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "r3.xlarge",
        "t2.small"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AmiId": {
      "eu-central-1": {
        "AMI": "ami-875042eb"
      },
      "sa-east-1": {
        "AMI": "ami-27b3094b"
      },
      "ap-northeast-1": {
        "AMI": "ami-0dd8f963"
      },
      "eu-west-1": {
        "AMI": "ami-38c09341"
      },
      "us-east-1": {
        "AMI": "ami-2051294a"
      },
      "us-west-1": {
        "AMI": "ami-d1315fb1"
      },
      "us-west-2": {
        "AMI": "ami-775e4f16"
      },
      "ap-southeast-2": {
        "AMI": "ami-e0c19f83"
      },
      "ap-southeast-1": {
        "AMI": "ami-3f03c55c"
      }
    }
  },
  "Resources": {
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "IAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }
    },
    "KafkaServerSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"KafkaServer SG to allow access to/from Kafka Brokers and Zookeepers.",
        "VpcId":{
          "Ref":"VPCId"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"0",
            "ToPort":"65535",
            "CidrIp":{
              "Ref":"SubnetCIDR"
            }
          }
        ]
      }
    },
    "SSHSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "RemoteAccessCIDR"
          }
        }]
      }
    },
    "KafkaZookeeperInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "region": {
          "Ref": "AWS::Region"
        },
        "stack_name": {
          "Ref": "AWS::StackName"
        },
        "AWS::CloudFormation::Init": {
          "config": {
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmiId",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "ZkeeperServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Ref": "EBSDeviceName"
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "EBSVolumeSize"
              },
              "VolumeType": {
                "Ref": "EBSType"
              }
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"KafkaServerSecurityGroup"
              },
              {
                "Ref":"SSHSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex":"0",
            "SubnetId": { "Ref" : "SubnetID" }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"ZooKeeperInPublicSubnets"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "\nyum -y install unzip java wget\n",
                "\ncurl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                "unzip awscli-bundle.zip\n",
                "./awscli-bundle/install -b ~/bin/aws\n",
                "export PATH=~/bin:$PATH\n",
                "export ZOOKEEPER_ID=1\n",
                "su - root -c 'mkdir -p /app/kafka'\n",
                "wget ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " -P /app\n",
                "export file=`echo ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " | rev | cut -f1 -d '/' | rev`\n",
                "tar -zxvf /app/$file -C /app/kafka\n",
                "su - root -c 'mkdir -p /tmp/zookeeper'\n",
                "echo $ZOOKEEPER_ID > /tmp/zookeeper/myid\n",
                "echo \"initLimit=5\nsyncLimit=2\" >> /app/kafka/kafka_2.11-1.1.0/config/zookeeper.properties\n",
                "sed -i 's/Defaults    requiretty/Defaults    !requiretty/g' /etc/sudoers\n",
                "sed -i 's/KAFKA_JMX_OPTS=\"-D/KAFKA_JMX_OPTS=\"-Djava.net.preferIPv4Stack=true -D/g' /app/kafka/kafka_2.11-1.1.0/bin/kafka-run-class.sh\n",
                "su - root -c 'nohup /app/kafka/kafka_2.11-1.1.0/bin/zookeeper-server-start.sh /app/kafka/kafka_2.11-1.1.0/config/zookeeper.properties > /dev/null 2>&1 &'\n"
              ]
            ]
          }
        }
      }
    },
    "KafkaBrokerInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "region": {
          "Ref": "AWS::Region"
        },
        "stack_name": {
          "Ref": "AWS::StackName"
        },
        "AWS::CloudFormation::Init": {
          "config": {
          }
        }
      },
      "DependsOn": "KafkaZookeeperInstance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmiId",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "KafkaServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Ref": "EBSDeviceName"
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "EBSVolumeSize"
              },
              "VolumeType": {
                "Ref": "EBSType"
              }
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"KafkaServerSecurityGroup"
              },
              {
                "Ref":"SSHSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex":"0",
            "SubnetId": { "Ref" : "SubnetID" }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"KafkaBrokerInPublicSubnets"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "\nyum -y install unzip java wget\n",
                "\ncurl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                "unzip awscli-bundle.zip\n",
                "./awscli-bundle/install -b ~/bin/aws\n",
                "export PATH=~/bin:$PATH\n",
                "export ZOOKEEPER_ID=1\n",
                "su - root -c 'mkdir -p /app/kafka'\n",
                "wget ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " -P /app\n",
                "export file=`echo ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " | rev | cut -f1 -d '/' | rev`\n",
                "tar -zxvf /app/$file -C /app/kafka\n",
                "su - root -c 'mkdir -p /tmp/kafka-logs'\n",
                "sed -i.bak \"s/zookeeper.connect=.*/zookeeper.connect=",
                {
                  "Fn::GetAtt": [
                    "KafkaZookeeperInstance",
                    "PrivateIp"
                  ]
                },
                ":2181/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i.bak \"s/broker.id=.*/broker.id=0/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i 's/Defaults    requiretty/Defaults    !requiretty/g' /etc/sudoers\n",
                "sed -i 's/KAFKA_JMX_OPTS=\"-D/KAFKA_JMX_OPTS=\"-Djava.net.preferIPv4Stack=true -D/g' /app/kafka/kafka_2.11-1.1.0/bin/kafka-run-class.sh\n",
                "su - root -c 'nohup /app/kafka/kafka_2.11-1.1.0/bin/kafka-server-start.sh /app/kafka/kafka_2.11-1.1.0/config/server.properties > /dev/null 2>&1 &'\n"
              ]
            ]
          }
        }
      }
    },
    "KafkaBrokerInstance2": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "region": {
          "Ref": "AWS::Region"
        },
        "stack_name": {
          "Ref": "AWS::StackName"
        },
        "AWS::CloudFormation::Init": {
          "config": {
          }
        }
      },
      "DependsOn": "KafkaZookeeperInstance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmiId",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "KafkaServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Ref": "EBSDeviceName"
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "EBSVolumeSize"
              },
              "VolumeType": {
                "Ref": "EBSType"
              }
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"KafkaServerSecurityGroup"
              },
              {
                "Ref":"SSHSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex":"0",
            "SubnetId": { "Ref" : "SubnetID" }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"KafkaBroker2InPublicSubnets"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "\nyum -y install unzip java wget\n",
                "\ncurl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                "unzip awscli-bundle.zip\n",
                "./awscli-bundle/install -b ~/bin/aws\n",
                "export PATH=~/bin:$PATH\n",
                "export ZOOKEEPER_ID=1\n",
                "su - root -c 'mkdir -p /app/kafka'\n",
                "wget ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " -P /app\n",
                "export file=`echo ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " | rev | cut -f1 -d '/' | rev`\n",
                "tar -zxvf /app/$file -C /app/kafka\n",
                "su - root -c 'mkdir -p /tmp/kafka-logs'\n",
                "sed -i.bak \"s/zookeeper.connect=.*/zookeeper.connect=",
                {
                  "Fn::GetAtt": [
                    "KafkaZookeeperInstance",
                    "PrivateIp"
                  ]
                },
                ":2181/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i.bak \"s/broker.id=.*/broker.id=1/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i 's/Defaults    requiretty/Defaults    !requiretty/g' /etc/sudoers\n",
                "sed -i 's/KAFKA_JMX_OPTS=\"-D/KAFKA_JMX_OPTS=\"-Djava.net.preferIPv4Stack=true -D/g' /app/kafka/kafka_2.11-1.1.0/bin/kafka-run-class.sh\n",
                "su - root -c 'nohup /app/kafka/kafka_2.11-1.1.0/bin/kafka-server-start.sh /app/kafka/kafka_2.11-1.1.0/config/server.properties > /dev/null 2>&1 &'\n"
              ]
            ]
          }
        }
      }
    },
    "KafkaBrokerInstance3": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "region": {
          "Ref": "AWS::Region"
        },
        "stack_name": {
          "Ref": "AWS::StackName"
        },
        "AWS::CloudFormation::Init": {
          "config": {
          }
        }
      },
      "DependsOn": "KafkaZookeeperInstance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmiId",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "KafkaServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Ref": "EBSDeviceName"
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "EBSVolumeSize"
              },
              "VolumeType": {
                "Ref": "EBSType"
              }
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"KafkaServerSecurityGroup"
              },
              {
                "Ref":"SSHSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex":"0",
            "SubnetId": { "Ref" : "SubnetID" }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"KafkaBroker3InPublicSubnets"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "\nyum -y install unzip java wget\n",
                "\ncurl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                "unzip awscli-bundle.zip\n",
                "./awscli-bundle/install -b ~/bin/aws\n",
                "export PATH=~/bin:$PATH\n",
                "export ZOOKEEPER_ID=1\n",
                "su - root -c 'mkdir -p /app/kafka'\n",
                "wget ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " -P /app\n",
                "export file=`echo ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " | rev | cut -f1 -d '/' | rev`\n",
                "tar -zxvf /app/$file -C /app/kafka\n",
                "su - root -c 'mkdir -p /tmp/kafka-logs'\n",
                "sed -i.bak \"s/zookeeper.connect=.*/zookeeper.connect=",
                {
                  "Fn::GetAtt": [
                    "KafkaZookeeperInstance",
                    "PrivateIp"
                  ]
                },
                ":2181/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i.bak \"s/broker.id=.*/broker.id=2/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i 's/Defaults    requiretty/Defaults    !requiretty/g' /etc/sudoers\n",
                "sed -i 's/KAFKA_JMX_OPTS=\"-D/KAFKA_JMX_OPTS=\"-Djava.net.preferIPv4Stack=true -D/g' /app/kafka/kafka_2.11-1.1.0/bin/kafka-run-class.sh\n",
                "su - root -c 'nohup /app/kafka/kafka_2.11-1.1.0/bin/kafka-server-start.sh /app/kafka/kafka_2.11-1.1.0/config/server.properties > /dev/null 2>&1 &'\n"
              ]
            ]
          }
        }
      }
    },
    "KafkaBrokerInstance4": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "region": {
          "Ref": "AWS::Region"
        },
        "stack_name": {
          "Ref": "AWS::StackName"
        },
        "AWS::CloudFormation::Init": {
          "config": {
          }
        }
      },
      "DependsOn": "KafkaZookeeperInstance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmiId",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "KafkaServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Ref": "EBSDeviceName"
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "EBSVolumeSize"
              },
              "VolumeType": {
                "Ref": "EBSType"
              }
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"KafkaServerSecurityGroup"
              },
              {
                "Ref":"SSHSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex":"0",
            "SubnetId": { "Ref" : "SubnetID" }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"KafkaBroker4InPublicSubnets"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "\nyum -y install unzip java wget\n",
                "\ncurl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                "unzip awscli-bundle.zip\n",
                "./awscli-bundle/install -b ~/bin/aws\n",
                "export PATH=~/bin:$PATH\n",
                "export ZOOKEEPER_ID=1\n",
                "su - root -c 'mkdir -p /app/kafka'\n",
                "wget ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " -P /app\n",
                "export file=`echo ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " | rev | cut -f1 -d '/' | rev`\n",
                "tar -zxvf /app/$file -C /app/kafka\n",
                "su - root -c 'mkdir -p /tmp/kafka-logs'\n",
                "sed -i.bak \"s/zookeeper.connect=.*/zookeeper.connect=",
                {
                  "Fn::GetAtt": [
                    "KafkaZookeeperInstance",
                    "PrivateIp"
                  ]
                },
                ":2181/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i.bak \"s/broker.id=.*/broker.id=3/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i 's/Defaults    requiretty/Defaults    !requiretty/g' /etc/sudoers\n",
                "sed -i 's/KAFKA_JMX_OPTS=\"-D/KAFKA_JMX_OPTS=\"-Djava.net.preferIPv4Stack=true -D/g' /app/kafka/kafka_2.11-1.1.0/bin/kafka-run-class.sh\n",
                "su - root -c 'nohup /app/kafka/kafka_2.11-1.1.0/bin/kafka-server-start.sh /app/kafka/kafka_2.11-1.1.0/config/server.properties > /dev/null 2>&1 &'\n"
              ]
            ]
          }
        }
      }
    },
    "KafkaBrokerInstance5": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "region": {
          "Ref": "AWS::Region"
        },
        "stack_name": {
          "Ref": "AWS::StackName"
        },
        "AWS::CloudFormation::Init": {
          "config": {
          }
        }
      },
      "DependsOn": "KafkaZookeeperInstance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmiId",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "KafkaServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Ref": "EBSDeviceName"
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "EBSVolumeSize"
              },
              "VolumeType": {
                "Ref": "EBSType"
              }
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"KafkaServerSecurityGroup"
              },
              {
                "Ref":"SSHSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex":"0",
            "SubnetId": { "Ref" : "SubnetID" }
          }
        ],
        "Tags":[
          {
            "Key":"Name",
            "Value":"KafkaBroker5InPublicSubnets"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "\nyum -y install unzip java wget\n",
                "\ncurl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                "unzip awscli-bundle.zip\n",
                "./awscli-bundle/install -b ~/bin/aws\n",
                "export PATH=~/bin:$PATH\n",
                "export ZOOKEEPER_ID=1\n",
                "su - root -c 'mkdir -p /app/kafka'\n",
                "wget ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " -P /app\n",
                "export file=`echo ",
                {
                  "Ref": "KafkaDownloadURL"
                },
                " | rev | cut -f1 -d '/' | rev`\n",
                "tar -zxvf /app/$file -C /app/kafka\n",
                "su - root -c 'mkdir -p /tmp/kafka-logs'\n",
                "sed -i.bak \"s/zookeeper.connect=.*/zookeeper.connect=",
                {
                  "Fn::GetAtt": [
                    "KafkaZookeeperInstance",
                    "PrivateIp"
                  ]
                },
                ":2181/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i.bak \"s/broker.id=.*/broker.id=4/g\" /app/kafka/kafka_2.11-1.1.0/config/server.properties\n",
                "sed -i 's/Defaults    requiretty/Defaults    !requiretty/g' /etc/sudoers\n",
                "sed -i 's/KAFKA_JMX_OPTS=\"-D/KAFKA_JMX_OPTS=\"-Djava.net.preferIPv4Stack=true -D/g' /app/kafka/kafka_2.11-1.1.0/bin/kafka-run-class.sh\n",
                "su - root -c 'nohup /app/kafka/kafka_2.11-1.1.0/bin/kafka-server-start.sh /app/kafka/kafka_2.11-1.1.0/config/server.properties > /dev/null 2>&1 &'\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs":{
    "KafkaBrokerInfo":{
      "Value" : {
        "Fn::Join" : [ ":", [ { "Fn::GetAtt" : [ "KafkaBrokerInstance", "PublicDnsName"]}, "9092" ] ]

      },
      "Description":"PublicDnsName of KafkaBroker.\n"
    },
    "KafkaBrokerInfo2":{
      "Value" : {
        "Fn::Join" : [ ":", [ { "Fn::GetAtt" : [ "KafkaBrokerInstance2", "PublicDnsName"]}, "9092" ] ]

      },
      "Description":"PublicDnsName of KafkaBroker2.\n"
    },
    "KafkaBrokerInfo3":{
      "Value" : {
        "Fn::Join" : [ ":", [ { "Fn::GetAtt" : [ "KafkaBrokerInstance3", "PublicDnsName"]}, "9092" ] ]

      },
      "Description":"PublicDnsName of KafkaBroker3.\n"
    },
    "KafkaBrokerInfo4":{
      "Value" : {
        "Fn::Join" : [ ":", [ { "Fn::GetAtt" : [ "KafkaBrokerInstance4", "PublicDnsName"]}, "9092" ] ]

      },
      "Description":"PublicDnsName of KafkaBroker4.\n"
    },
    "KafkaBrokerInfo5":{
      "Value" : {
        "Fn::Join" : [ ":", [ { "Fn::GetAtt" : [ "KafkaBrokerInstance5", "PublicDnsName"]}, "9092" ] ]

      },
      "Description":"PublicDnsName of KafkaBroker5.\n"
    },
    "ZookeeperInfo":{
      "Value" : {
        "Fn::Join" : [ ":", [ { "Fn::GetAtt" : [ "KafkaZookeeperInstance", "PublicDnsName"]}, "2181" ] ]
      },
      "Description":"PublicDnsName of Zookeeper.\n"
    }
  }
}


